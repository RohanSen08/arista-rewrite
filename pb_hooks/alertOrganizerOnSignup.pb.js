// Ensure this file is placed adjacent to the pb_data folder of your PocketBase database
onRecordUpdate(async (e) => {
    try {
        const oldRecord = e.record.original();
        const oldSignups = oldRecord.get("signed_up") || [];
        const currentSignups = e.record.get("signed_up") || [];

        // Identify new signups
        const newSignups = currentSignups.filter(v => !oldSignups.includes(v));

        if (newSignups.length > 0) {
            console.log(`New signups: ${newSignups}`);

            // Fetch event owner details
            const eventOwnerId = e.record.get("event_owner");
            const eventOwner = await $app.findRecordById("users", eventOwnerId);
            const ownerEmail = eventOwner.get("email");
            const ownerName = eventOwner.get("name");
            const eventName = e.record.get("name");

            // Fetch details of new volunteers
            const newVolunteers = [];
            for (const userId of newSignups) {
                try {
                    const user = await $app.findRecordById("users", userId);
                    newVolunteers.push({
                        name: user.get("name"),
                        email: user.get("email"),
                    });
                } catch (userError) {
                    console.error(`Failed to fetch details for user ID ${userId}:`, userError);
                }
            }

            // Generate the list of new volunteers
            const volunteerList = newVolunteers.map(volunteer => `<li>${volunteer.name} (${volunteer.email})</li>`).join('');

            // Compose the email message
            const message = new MailerMessage({
                from: {
                    address: $app.settings().meta.senderAddress,
                    name: $app.settings().meta.senderName,
                },
                to: [{ address: ownerEmail }],
                subject: `New Volunteers Signed Up for ${eventName}`,
                html: `
                    <p>Dear ${ownerName},</p>
                    <p>The following new volunteers have signed up for your event "${eventName}":</p>
                    <ul>
                        ${volunteerList}
                    </ul>
                    <p>Sincerely,</p>
                    <p>ARISTA Web Committee</p>
                    <p>This is an automated email generated by the website -- if you have received this email in error, please contact us at stuyaristanycweb@gmail.com</p>
                `,
            });
            console.log(message);
            // Send the email to the event owner
            await $app.newMailClient().send(message);
            console.log(`Notification email sent to event owner ${ownerEmail}`);
        }
    } catch (error) {
        console.error('Error processing record update:', error);
    } finally {
        e.next();
    }
}, "events");

